//
//  main.cpp
//  largProdInSeries
//
//  Created by Michael Raimi on 2/3/14.
//  Copyright (c) 2014 Michael Raimi. All rights reserved.
//

#include <iostream>
#include <string>
#include <cstdlib>
#include <stdlib.h>

using namespace std;

int main(int argc, const char * argv[])
{

    
    
    
    std::string s("7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450");
    
    int product=1;
    int largest=1;
    int base=0;
    char *manip = new char[6];
    while (base<=s.length()-5) {
        std::string str1 = s.substr(base,5);
        const char *x = str1.c_str();
        std::strcpy(manip, x);
        
        while(*manip){
            char c = *manip;
            int i = atoi(&c);
            product *= i;
            manip++;
        }
        
        if (product>largest){
            largest=product;
        }
        product=1;
        manip = new char[6];
        base++;
        
    }
   
//    int start = 9*9*9*9*9;
//    while (start>=0) {
//        char sub[33];
//        sprintf(sub,"%d", start);
//        string toCheck(sub);
//        if(s.find(toCheck.c_str()) && (toCheck.find('0')==string::npos)){
//            
//            printf("%d\n", start);
//            return 0;
//        }
//        start--;
//    }
    
    printf("%d\n", largest);
    
    
    
    return 0;
}

